openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Admin article controller
    description: API for manage articles in admin mode
  - name: '!Aauth controller'
    description: API for registration and login
  - name: Guest article Controller
    description: API for getting articles in guest mode
paths:
  /admin/articles/{id}:
    get:
      tags:
        - Admin article controller
      summary: Get certain article of author by id
      operationId: getArticle_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
    put:
      tags:
        - Admin article controller
      summary: Update an article
      operationId: updateArticle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
    delete:
      tags:
        - Admin article controller
      summary: Delete an article by id
      operationId: deleteArticle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /auth/signup:
    post:
      tags:
        - '!Aauth controller'
      summary: Register a new user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '500':
          description: Internal server error
  /auth/login:
    post:
      tags:
        - '!Aauth controller'
      summary: Authenticate a user and generate a JWT token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error
  /admin/articles:
    get:
      tags:
        - Admin article controller
      summary: Get all article of author
      operationId: getAllArticles_1
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedModel'
    post:
      tags:
        - Admin article controller
      summary: Create a new article
      operationId: createArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  /healthcheck:
    get:
      tags:
        - health-check-controller
      operationId: healthCheck
      responses:
        '200':
          description: OK
  /articles:
    get:
      tags:
        - Guest article Controller
      summary: Get all articles in system
      operationId: getAllArticles
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedModel'
  /articles/{id}:
    get:
      tags:
        - Guest article Controller
      summary: Get an articles by id
      operationId: getArticle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Article'
components:
  schemas:
    CreateArticleRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the article
          example: Understanding OpenAPI in Spring Boot
          default: New Article Title
        content:
          type: string
          description: Content of the article
          example: This article explains how to integrate OpenAPI in a Spring Boot application...
          default: Article content goes here...
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        registrationDate:
          type: string
          format: date-time
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
        enabled:
          type: boolean
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
        credentialsNonExpired:
          type: boolean
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
          description: Email address for the new user
          example: user@example.com
          default: user@example.com
        password:
          type: string
          description: Password for the new user account
          example: '@PasswOrd123'
          default: '@PasswOrd123'
        fullName:
          type: string
          description: Full name of the new user
          example: John Doe
          default: John Doe
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
          example: user@example.com
          default: user@example.com
        password:
          type: string
          description: Password for the user account
          example: '@PasswOrd123'
          default: '@PasswOrd123'
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int64
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModel:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          $ref: '#/components/schemas/PageMetadata'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT